{"version":3,"sources":["api/themoviedb.js","AppConfig.js","components/HomePage/index.js","components/MovieDetailsPage/MoviesDetailsPageContext.js","components/MovieDetailsPage/Cast/index.js","components/MovieDetailsPage/Reviews/index.js","components/MovieDetailsPage/index.js","components/Search/index.js","routes.js","components/MoviesPage/index.js","components/NavHeader/index.js","components/Content/index.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","TMDB_API_KEY","axios","defaults","baseURL","params","api_key","HomePage","useState","trendingList","setTrendingList","useEffect","get","then","res","data","results","className","map","item","key","id","to","title","name","createContext","Cast","movieId","useContext","Context","cast","setCast","handleCast","getMovieCredits","profile_path","width","src","alt","character","Reviews","reviews","setReviews","handleReviews","getMovieReviews","length","author","content","MovieDetailsPage","match","history","url","movieDetails","setMovieDetails","handleMovieDetails","getMovieDetails","Provider","value","onClick","goBack","poster_path","vote_average","overview","genres","pathname","state","Consumer","path","component","exact","Search","onSubmit","search","setSearch","e","preventDefault","type","onChange","target","routes","label","isExact","isInMenu","location","searchResult","setState","handleOnSubmit","query","push","filter","qs","parse","NavHeader","activeClassName","Content","Component","App","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.550bd774.chunk.js","sourcesContent":["import axios from 'axios';\nimport AppConfig from '../AppConfig';\n\nconst apiKey = AppConfig.TMDB_API_KEY;\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: apiKey\n};\n\nexport const images300Root = 'https://image.tmdb.org/t/p/w300/';\n\nexport const getTrending = () => axios.get('/trending/all/week').then((res) => res.data);\n\nexport const getMovieDetails = (movieId) => axios.get(`/movie/${movieId}`).then((res) => res.data);\n\nexport const getMovieCredits = (movieId) => axios.get(`/movie/${movieId}/credits`).then((res) => res.data);\n\nexport const getMovieReviews = (movieId) => axios.get(`/movie/${movieId}/reviews`).then((res) => res.data);\n\nexport const searchMovie = (query) => axios.get(`/search/movie?query=${query}`).then((res) => res.data);\n","const AppConfig = {\n  TMDB_API_KEY: '8125804d73b84623c60519ecab083b7f',\n};\n\nexport default AppConfig;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getTrending } from '../../api/themoviedb';\n\nconst HomePage = () => {\n  const [ trendingList, setTrendingList ] = useState([]);\n\n  useEffect(() => {\n    getTrending().then((data) => {\n      setTrendingList(data.results);\n    });\n  }, []);\n\n  return (\n    <div className=\"home-page\">\n      <h1>Trending today</h1>\n      <ul>\n        {trendingList.map((item) => (\n          <li key={item.id}>\n            <Link to={`/movies/${item.id}`}>{item.title || item.name}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import { createContext } from 'react';\n\nexport default createContext();","import React, { useEffect, useState, useContext } from 'react';\nimport { getMovieCredits, images300Root } from '../../../api/themoviedb';\nimport Context from '../MoviesDetailsPageContext';\n\nconst Cast = () => {\n  const movieId = useContext(Context);\n  const [ cast, setCast ] = useState([]);\n\n  const handleCast = () => {\n    getMovieCredits(movieId).then((data) => {\n      setCast([ ...cast, ...data.cast ]);\n    });\n  };\n\n  useEffect(() => {\n    handleCast();\n  }, []);\n\n  return (\n    <div className=\"Cast\">\n      <h2>Cast</h2>\n      <ul>\n        {cast &&\n          cast.map((item) => (\n            <li key={item.id}>\n              {item.profile_path ? (\n                <img width=\"100\" src={`${images300Root}${item.profile_path}`} alt={item.name} />\n              ) : (\n                <b>no image</b>\n              )}\n              <h4>{item.name}</h4>\n              <p>Character: {item.character}</p>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { getMovieReviews } from '../../../api/themoviedb';\nimport Context from '../MoviesDetailsPageContext';\n\nconst Reviews = () => {\n  const movieId = useContext(Context);\n  const [ reviews, setReviews ] = useState([]);\n\n  const handleReviews = () => {\n    getMovieReviews(movieId).then((data) => {\n      setReviews([ ...reviews, ...data.results ]);\n    });\n  };\n\n  useEffect(() => {\n    handleReviews();\n  }, []);\n\n  return (\n    <div className=\"reviews\">\n      <h2>Reviews</h2>\n      <ul>\n        {reviews.length &&\n          reviews.map((item) => (\n            <li key={item.id}>\n              <h4>Author: {item.author}</h4>\n              <p>{item.content}</p>\n            </li>\n          ))}\n        {!reviews.length && <b>No reviews</b>}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import React, { useState, useEffect } from 'react';\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\nimport { getMovieDetails, images300Root } from '../../api/themoviedb';\nimport Cast from './Cast';\nimport Reviews from './Reviews';\nimport Context from './MoviesDetailsPageContext';\n\nconst MovieDetailsPage = ({ match, history }) => {\n  const { movieId } = match.params;\n  const { url } = match;\n\n  const [ movieDetails, setMovieDetails ] = useState({});\n\n  const handleClickBack = () => {\n    history.goBack();\n  };\n\n  const handleMovieDetails = () => {\n    getMovieDetails(movieId).then((data) => {\n      setMovieDetails({ ...movieDetails, ...data });\n    });\n  };\n\n  useEffect(() => {\n    handleMovieDetails();\n  }, []);\n\n  return (\n    <Context.Provider value={movieId}>\n      <div className=\"movie-details-page\">\n        <button onClick={handleClickBack}>{'< back'}</button>\n        {movieDetails && (\n          <div>\n            {movieDetails.poster_path ? (\n              <img src={`${images300Root}${movieDetails.poster_path}`} alt={movieDetails.title} />\n            ) : (\n              <b>no poster</b>\n            )}\n\n            <div>\n              <h1>{movieDetails.title}</h1>\n              <p>User Score: {movieDetails.vote_average * 10}%</p>\n              <h3>Overview</h3>\n              <p>{movieDetails.overview}</p>\n\n              <h3>Genres</h3>\n              <p>\n                {movieDetails.genres &&\n                  movieDetails.genres.map((item) => <span key={item.id}>{item.name}&nbsp;&nbsp;&nbsp;</span>)}\n              </p>\n            </div>\n            <hr />\n            <h4>Additional inpormation</h4>\n            <ul>\n              <li>\n                <Link\n                  to={{\n                    pathname: `${url}/cast`,\n                    state: { movieId: movieId }\n                  }}\n                >\n                  Cast\n                </Link>\n              </li>\n              <li>\n                <Link\n                  to={{\n                    pathname: `${url}/reviews`,\n                    state: { movieId: movieId }\n                  }}\n                >\n                  Reviews\n                </Link>\n              </li>\n            </ul>\n            <hr />\n            <div>\n              <Context.Consumer>\n                {() => {\n                  return (\n                    <Switch>\n                      <Route path={`${url}/cast`} component={Cast} exact />\n                      <Route path={`${url}/reviews`} component={Reviews} exact />\n                      <Redirect to={url} />\n                    </Switch>\n                  );\n                }}\n              </Context.Consumer>\n            </div>\n          </div>\n        )}\n      </div>\n    </Context.Provider>\n  );\n};\n\nexport default MovieDetailsPage;\n","import React, { useState } from 'react';\n\nconst Search = ({ onSubmit }) => {\n  const [ search, setSearch ] = useState();\n\n  const handleSearchFormSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(search);\n  };\n\n  const handleInputChange = (e) => setSearch(e.target.value);\n\n  return (\n    <div className=\"search\">\n      <form onSubmit={handleSearchFormSubmit}>\n        <input type=\"text\" className=\"search-input\" onChange={handleInputChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Search;\n","import HomePage from './components/HomePage';\nimport MovieDetailsPage from './components/MovieDetailsPage';\nimport MoviesPage from './components/MoviesPage';\n\nconst routes = [\n  {\n    path: '/',\n    label: 'Home',\n    isExact: true,\n    isInMenu: true,\n    component: HomePage,\n  },\n  {\n    path: '/movies',\n    label: 'Movies',\n    isExact: true,\n    isInMenu: true,\n    component: MoviesPage,\n  },\n  {\n    path: '/movies/:movieId',\n    label: 'Movie',\n    isExact: false,\n    isInMenu: false,\n    component: MovieDetailsPage,\n  },\n];\n\nexport default routes;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { searchMovie } from '../../api/themoviedb';\nimport Search from '../Search';\nimport qs from 'query-string';\n\nconst MoviesPage = ({ match, history, location }) => {\n  const [ state, setState ] = useState({\n    search: '',\n    searchResult: []\n  });\n  const { url } = match;\n\n  const handleOnSubmit = (search) =>\n    searchMovie(search).then((data) => {\n      setState({ ...state, searchResult: data.results });\n      history.push({\n        ...location,\n        search: `filter=${search}`\n      });\n    });\n\n  useEffect(\n    () => {\n      const { filter } = qs.parse(location.search);\n      setState({ ...state, search: filter });\n      if (state.search) {\n        handleOnSubmit(state.search);\n      }\n    },\n    [ state.search ]\n  );\n\n  return (\n    <div className=\"movies-page\">\n      <h1>MoviesPage</h1>\n      <Search onSubmit={handleOnSubmit} />\n      <ul>\n        {state.searchResult.map((item) => (\n          <li key={item.id}>\n            <Link to={`${url}/${item.id}`}>{item.title || item.name}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default MoviesPage;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport routes from '../../routes';\n\nconst NavHeader = () => (\n  <div className=\"nav-header\">\n    <ul>\n      {routes.map(\n        ({ path, isExact, label, isInMenu }) =>\n          isInMenu && (\n            <li key={path}>\n              <NavLink exact={isExact} to={path} className=\"nav-link\" activeClassName=\"active-nav-link\">\n                {label}\n              </NavLink>\n            </li>\n          )\n      )}\n    </ul>\n  </div>\n);\n\nexport default NavHeader;\n","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport routes from '../../routes';\n\nclass Content extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        <Switch>\n          {routes.map(({ path, isExact, component }) => (\n            <Route key={path} path={path} component={component} exact={isExact} />\n          ))}\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default Content;\n","import React from 'react';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\n\nimport './App.css';\nimport NavHeader from './components/NavHeader';\nimport Content from './components/Content';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <NavHeader />\n        <Content />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}