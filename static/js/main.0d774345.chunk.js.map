{"version":3,"sources":["routes.js","components/NavHeader/NavHeader.js","components/Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["Home","lazy","MovieDetails","routes","path","label","isExact","isInMenu","component","NavHeader","className","map","key","exact","to","activeClassName","Content","Component","App","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAEMA,G,MAAOC,gBAAK,kBAAM,uDAClBC,EAAeD,gBAAK,kBACxB,sDA4BaE,EAxBA,CACb,CACEC,KAAM,IACNC,MAAO,OACPC,SAAS,EACTC,UAAU,EACVC,UAAWR,GAEb,CACEI,KAAM,UACNC,MAAO,SACPC,SAAS,EACTC,UAAU,EACVC,UAfWP,gBAAK,kBAAM,uDAiBxB,CACEG,KAAM,mBACNC,MAAO,QACPC,SAAS,EACTC,UAAU,EACVC,UAAWN,ICPAO,EAjBG,kBAChB,yBAAKC,UAAU,cACb,4BACGP,EAAOQ,KACN,gBAAGP,EAAH,EAAGA,KAAME,EAAT,EAASA,QAASD,EAAlB,EAAkBA,MAAlB,SAAyBE,UAErB,wBAAIK,IAAKR,GACP,kBAAC,IAAD,CAASS,MAAOP,EAASQ,GAAIV,EAAMM,UAAU,WAAWK,gBAAgB,mBACrEV,U,uCCOFW,E,uKAbX,OACE,yBAAKN,UAAU,WACb,kBAAC,IAAD,KACGP,EAAOQ,KAAI,YAAmC,IAAhCP,EAA+B,EAA/BA,KAAME,EAAyB,EAAzBA,QAASE,EAAgB,EAAhBA,UAC5B,OAAO,kBAAC,IAAD,CAAOI,IAAKR,EAAMA,KAAMA,EAAMI,UAAWA,EAAWK,MAAOP,OAEpE,kBAAC,IAAD,CAAUQ,GAAG,Y,GARDG,aCgBPC,MAbf,WACE,OACE,kBAAC,WAAD,CAAUC,SAAU,0CAClB,kBAAC,IAAD,KACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,UCDUU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d774345.chunk.js","sourcesContent":["import { lazy } from 'react';\n\nconst Home = lazy(() => import('./components/HomePage/HomePage' /* webpackChunkName: \"home-page\" */));\nconst MovieDetails = lazy(() =>\n  import('./components/MovieDetailsPage/MovieDetailsPage' /* webpackChunkName: \"movie-details-page\" */)\n);\nconst Movies = lazy(() => import('./components/MoviesPage/MoviesPage' /* webpackChunkName: \"movies-page\" */));\n\nconst routes = [\n  {\n    path: '/',\n    label: 'Home',\n    isExact: true,\n    isInMenu: true,\n    component: Home\n  },\n  {\n    path: '/movies',\n    label: 'Movies',\n    isExact: true,\n    isInMenu: true,\n    component: Movies\n  },\n  {\n    path: '/movies/:movieId',\n    label: 'Movie',\n    isExact: false,\n    isInMenu: false,\n    component: MovieDetails\n  }\n];\n\nexport default routes;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport routes from '../../routes';\n\nconst NavHeader = () => (\n  <div className=\"nav-header\">\n    <ul>\n      {routes.map(\n        ({ path, isExact, label, isInMenu }) =>\n          isInMenu && (\n            <li key={path}>\n              <NavLink exact={isExact} to={path} className=\"nav-link\" activeClassName=\"active-nav-link\">\n                {label}\n              </NavLink>\n            </li>\n          )\n      )}\n    </ul>\n  </div>\n);\n\nexport default NavHeader;\n","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport routes from '../../routes';\n\nclass Content extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        <Switch>\n          {routes.map(({ path, isExact, component }) => {\n            return <Route key={path} path={path} component={component} exact={isExact} />;\n          })}\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default Content;\n","import React, { Suspense } from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nimport './App.css';\nimport NavHeader from './components/NavHeader/NavHeader';\nimport Content from './components/Content/Content';\n\nfunction App() {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <HashRouter>\n        <div className=\"App\">\n          <NavHeader />\n          <Content />\n        </div>\n      </HashRouter>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}